#LyX 2.1 created this file. For more info see http://www.lyx.org/
\lyxformat 474
\begin_document
\begin_header
\textclass book
\use_default_options true
\maintain_unincluded_children false
\language spanish
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_math auto
\font_default_family rmdefault
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize 11
\spacing onehalf
\use_hyperref false
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine natbib
\cite_engine_type authoryear
\biblio_style plainnat
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes true
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\author -638769289 "Usuarioç" 
\author 1188755597 "usuario" 
\end_header

\begin_body

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
newcommand*{
\backslash
mtol}{This is some more text than fit at ony line but only some   and not
 a lot}
\end_layout

\begin_layout Plain Layout


\backslash
newenvironment{mldescription}{%   
\end_layout

\begin_layout Plain Layout


\backslash
begin{addmargin}[2.5em]{0em}     
\end_layout

\begin_layout Plain Layout


\backslash
setlength{
\backslash
parindent}{-2.5em}%     
\end_layout

\begin_layout Plain Layout


\backslash
newcommand*{
\backslash
mlitem}[1]{
\backslash
par
\backslash
textbf{##1}
\backslash
quad}
\backslash
indent 
\end_layout

\begin_layout Plain Layout

}{%   
\end_layout

\begin_layout Plain Layout


\backslash
end{addmargin}   
\end_layout

\begin_layout Plain Layout


\backslash
medskip }
\end_layout

\end_inset


\end_layout

\begin_layout Chapter
Enfoque y Herramientas
\begin_inset CommandInset label
LatexCommand label
name "chap:Enfoque-y-Herramientas"

\end_inset


\end_layout

\begin_layout Standard
En este capítulo se describe el enfoque propuesto para predecir atributos
 dinámicos de componentes de software, en base a propiedades medidas durante
 su ejecución.
 El enfoque plantea llevar a cabo la predicción mediante un proceso de aprendiza
je de máquina que involucra dos pasos: medición y aprendizaje.
 El primero implica la recolección de indicadores o mediciones durante la
 ejecución del componente, lo que puede significar la ejecución de una pieza
 de código, la llamada a una función, o la invocación de un servicio
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
Otros detalles se dan luego, porque hasta aca no se sabe que es un problema
 de entrada o una operacion
\end_layout

\end_inset

.
 Lo segundo implica la construcción de modelos de predicción con técnicas
 de regresión.
 La construcción o entrenamiento de estos modelos se hace en un proceso
 interactivo con el usuario, que involucra una configuración inicial de
 los datos y la optimización automática de los parámetros de acuerdo a las
 tasas de error arrojadas por métricas de evaluación 
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
Se hace esto ultimo? Si no, se borra
\end_layout

\end_inset

.
 Por último, los modelos generados pueden utilizarse en distintos casos
 prácticos, como por ejemplo, la selección automática de servicios y algoritmos,
 o soportar decisiones de diseño o implementación.
 
\end_layout

\begin_layout Standard
Como soporte para el enfoque, se desarrollaron dos herramientas independientes
 diseñadas para efectuar cada uno de los pasos mencionados.
 Por un lado, el framework
\emph on
 Android Meter
\change_deleted -638769289 1494877720

\begin_inset Note Note
status collapsed

\begin_layout Plain Layout

\emph on
O cualquier otro nombre, pero mas corto
\end_layout

\end_inset


\change_unchanged

\emph default
 es una biblioteca Java para realizar pruebas de desempeños de código en
 Android y capturar mediciones durante la ejecución.
 Su diseño es genérico para usar sobre cualquier dominio del que se quieran
 obtener mediciones de desempeño.
 Por otro lado, se desarrolló una herramienta standalone denominada 
\emph on
Nekonata
\emph default
 
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
Primero definir que hace la herramiento y luego dar caracteristicas secundarias,
 como lo de que brinda soporte para distintas librerias, etc.
\end_layout

\end_inset

diseñada para integrar fácilmente técnicas de aprendizaje automático incluidas
 en librerías Java de terceros.
 La herramienta se usa para la construcción del modelo a partir del conjunto
 de datos capturados con el uso del framework Android Meter, mediante un
 proceso de automatización de los algoritmos en complemento de información
 gráfica para la colaboración interactiva del usuario.
 
\end_layout

\begin_layout Standard
Estas cuestiones se describen en detalle de la siguiente manera.
 En la sección 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Etapas-del-método"

\end_inset

 se profundiza sobre las distintas etapas del enfoque, incluyendo algunos
 usos prácticos de la propuesta.
 En las siguientes secciones se describen cada uno de las herramientas desarroll
adas, presentando el framework para la medición y recolección de datos en
 la sección 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Framework-de-medición"

\end_inset

 y finalmente, en la sección 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:Herramienta-de-entrenamiento"

\end_inset

 se presenta la herramienta para la construcción de modelos de predicción.
 
\end_layout

\begin_layout Section
Etapas del método
\begin_inset CommandInset label
LatexCommand label
name "sec:Etapas-del-método"

\end_inset


\end_layout

\begin_layout Standard
El enfoque propuesto se conceptualiza como un proceso de dos fases complementari
as, con las que se obtienen modelos de predicción de propiedades de componentes
 que pueden usarse en distintas aplicaciones o casos prácticos.
 La figura 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:method-stages"

\end_inset

 muestra un esquema conceptual del enfoque, cuyas etapas se describen a
 continuación:
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename ../images/enfoque-overview.png
	scale 55

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Esquema conceptual del enfoque en fases.
 
\begin_inset CommandInset label
LatexCommand label
name "fig:method-stages"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection*
Medición y recolección
\series bold
 de datos
\series default
 
\end_layout

\begin_layout Standard
\noindent
El proceso comienza con la medición de un componente en ejecución y la recolecci
ón de estas mediciones en un dataset.
 Cada dataset pertenece a la ejecución de un componente diferente, del cual
 se extraen todas sus mediciones de desempeño (tiempo de respuesta, etc)
 mas las propiedades que podrían influir sobre este desempeño.
 Durante la ejecución de cada componente se van realizando las mediciones
 sobre distintos aspectos de la operación y registrando cada uno de estos
 resultados en un archivo para su posterior análisis.
 A su vez, el proceso de recolección de datos involucra la ejecución de
 sub etapas, pudiendo requerir el proceso algunas o todas las tareas que
 se detallan a continuación:
\end_layout

\begin_layout Itemize
Integración de componentes: A menudo se requiere la evaluación de componentes
 de terceros, tanto de servicios Web como algoritmos de bibliotecas instaladas,
 de manera que deben ser integrados correctamente a la herramienta para
 ser tratados como componentes.
 
\end_layout

\begin_layout Itemize
Selección de características del contexto: mientras se realiza la ejecución
 de los componentes, las características del dispositivo móvil donde se
 llevan a cabo las operaciones pueden ser capturadas como mediciones.
 Realizar las mediciones sobre distintos dispositivos móviles persigue la
 idea de que las capacidades de cada dispositivo (cantidad de memoria, CPU,
 etc) influye en el desempeño de los componentes, como por ejemplo, su tiempo
 de ejecución.
\end_layout

\begin_layout Itemize
Generación de datos de entrada: los componentes requieren un conjunto de
 parámetros o datos de entrada para su ejecución, por eso se debe proveer
 una manera para generar arbitrariamente instancias de datos de entrada
 del componente a medir, o la capacidad para obtener instancias externamente
 a través de enlaces o archivos.
 
\end_layout

\begin_layout Itemize
Selección de propiedades de la entrada: Es posible obtener propiedades de
 los datos de entrada, generalmente atributos que configuran o sirven para
 generar una instancia como su tamaño.
 
\end_layout

\begin_layout Itemize
Ejecución de componentes y obtención de mediciones: los componentes son
 ejecutados con las entradas generadas, mientras se toman y registran mediciones
 sobre las propiedades del contexto de ejecución (datos de entrada y dispositivo
), que son los atributos independientes o predictores, además de las propiedades
 de interés a predecir.
 De esta forma, el dataset que se obtiene puede ser formado por una cantidad
 variable de propiedades en base a las características que hayan sido elegidas
 para ser medidas.
 
\end_layout

\begin_layout Subsection*
Aprendizaje
\end_layout

\begin_layout Standard
A partir del conjunto de datos obtenidos en la etapa anterior, se aplican
 técnicas de aprendizaje de máquina para la extracción de conocimiento.
 Tal conocimiento se refleja mediante la construcción de modelos predictivos
 que mejor se ajustan a la generalización de la información mediante un
 proceso de entrenamiento, optimización y evaluación de los mismos.
 El proceso de aprendizaje requiere indefectiblemente de un conjunto de
 datos de entrenamiento volcado en un archivo, una propiedad de ese conjunto
 a predecir y un conjunto de algoritmos que aplican técnicas de regresión
 sobre los datos.
 El aprendizaje está conformado por varias sub etapas o sub procesos.
\end_layout

\begin_layout Itemize
Configuración de las técnicas: las técnicas de regresión representan algoritmos
 que pueden involucrar diferentes parámetros de configuración.
 La variabilidad en estos valores permite ajustar las preferencias del algoritmo
 y consecuentemente, la obtención de modelos de calidad diferente.
 Por lo tanto, el desafío principal de esta parte de la etapa es encontrar
 los valores apropiados para cada uno de los parámetros, teniendo como base,
 el conocimiento sobre el efecto que el parámetro causa en el algoritmo.
 Al obtener la mejor configuración de una técnica, para un dataset y una
 propiedad particular, se facilita la comparación simultánea de todas las
 técnicas disponibles a través de las métricas de evaluación y en consecuencia
 seleccionar la más óptima.
 
\end_layout

\begin_layout Itemize
Construcción de modelos: la construcción o entrenamiento de modelos predictivos
 es un proceso que implica la ejecucion de una o mas técnicas de regresión
 sobre el conjunto de los datos y continúa opcionalmente con un proceso
 de evaluación
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
Validacion no seria evaluacion que se explica en el siguiente item?
\end_layout

\end_inset

.
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
Esto hace referencia al capitulo de evaluacion
\end_layout

\end_inset

El entrenamiento utiliza las mediciones ya obtenidas en la etapa anterior
 y a partir de la propiedad que se desea predecir, el algoritmo va definiendo
 la función o modelo de regresión que mejor ajusta las relaciones entre
 los atributos independientes (o predictores) del dataset y el atributo
 a predecir.
 Esta etapa concentra el mayor porcentaje del tiempo computacional y uso
 de memoria, y varía de acuerdo a la complejidad o simplicidad de cada técnica
 en particular.
 
\end_layout

\begin_layout Itemize
Evaluación de modelos: una vez concluida la etapa de entrenamiento, el modelo
 obtenido puede ser analizado para determinar la medida en que este es capaz
 de generalizar cualquier entrada de dataset futura y estimar la propiedad
 de interés.
 La noción sobre el desempeño del modelo tiene lugar a partir de métricas
 existentes para modelos de regresión, que capturan el error de predicción
 o el coeficiente de correlación para conocer el grado de interdependencia
 de las propiedades.
 
\end_layout

\begin_layout Subsection*
Aplicaciones de los modelos
\begin_inset CommandInset label
LatexCommand label
name "sec:Aplicaciones-de-la-1"

\end_inset


\end_layout

\begin_layout Standard
Finalmente, se pretende utilizar estos modelos de predicción en entornos
 de aplicación que permitan la selección del componente más adecuado en
 base a propiedades de los parámetros de entrada u otras propiedades del
 contexto de ejecución, a través de un proceso automatizado que determine
 al usuario la opción más favorable evitando la ejecución individual de
 cada componente.
 
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
Esto es muy especifico.
 A lo sumo tendria que ser o formar parte de uno de los items de abajo
\end_layout

\end_inset

 La construcción de modelos de predicción de performance
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
No usemos la sigla EPM, porque se tendria que haber presentado mucho antes
 en el texto.
 Sigan llamando simplemente modelos de prediccion o modelos predictivos
\end_layout

\end_inset

 ha ido creciendo debido a la utilidad que presentan en una gran variedad
 de contextos prácticos.
 A continuación, se detallan algunos:
\end_layout

\begin_layout Description
Selección
\begin_inset space ~
\end_inset

de
\begin_inset space ~
\end_inset

algoritmos Como se ha tratado en algunos trabajos 
\begin_inset CommandInset citation
LatexCommand citet
key "Hutter2014"

\end_inset

, los modelos de predicción son útiles para la selección automática de algoritmo
s .
 A través de estos modelos se puede predecir con cierto error el rendimiento
 de cada uno de estos algoritmos candidatos y mediante una simple comparación
 seleccionar el más apropiado considerando la instancia del problema y las
 características del hardware.
 
\end_layout

\begin_layout Description
Ajustes
\begin_inset space ~
\end_inset

de
\begin_inset space ~
\end_inset

parámetros
\begin_inset space ~
\end_inset

y
\begin_inset space ~
\end_inset

configuración
\begin_inset space ~
\end_inset

automática
\begin_inset space ~
\end_inset

del
\begin_inset space ~
\end_inset

algoritmo Los modelos predictivos sirve a dos propósitos fundamentales.
 Por un lado, modelar el comportamiento o funcionalidad de un algoritmo
 parametrizado en base a la configuración de tales parámetros, en cuyo caso
 se puede alternar entre el aprendizaje del modelo y su uso para identificar
 configuraciones interesantes para evaluar posteriormente.
 Por otro lado, se puede modelar el rendimiento del algoritmo basado conjuntamen
te en las características de las instancias del problema y la configuración
 de sus parámetros.
 Tales modelos pueden utilizarse para ajustar los valores de tales parámetros
 y obtener una mejor predicción basada en la instancia particular.
 
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{mldescription} 
\end_layout

\begin_layout Plain Layout


\backslash
mlitem{Obtener una visión general de las instancias y el rendimiento de
 los algoritmos} Los modelos se pueden utilizar para evaluar las características
 de la instancia y los valores de los parámetros del algoritmo que más impactan
 en el rendimiento.
 Algunos modelos son compatibles con este tipo de evaluaciones directamente.
 Para otros modelos, existen métodos de selección de atributos (características
 genéricas) para identificar un grupo más reducido de entradas del modelo
 que son claves, y describen el rendimiento del algoritmo casi tan bien
 como todo el conjunto de entradas.
\end_layout

\begin_layout Plain Layout


\backslash
end{mldescription} 
\end_layout

\end_inset


\end_layout

\begin_layout Description
Selección
\begin_inset space ~
\end_inset

de
\begin_inset space ~
\end_inset

servicio
\begin_inset space ~
\end_inset

para
\begin_inset space ~
\end_inset

composición
\begin_inset space ~
\end_inset

de
\begin_inset space ~
\end_inset

servicios Cuando varios servicios Web implementan la misma funcionalidad,
 los modelos de rendimiento resultan ser un buen criterio para escoger el
 mejor candidato entre ellos.
 Incluso en tiempo de ejecución, los proveedores de servicio pueden cambiarse
 si las condiciones del contexto y los parámetros de entrada se modifican.
 
\end_layout

\begin_layout Description
Planificación
\begin_inset space ~
\end_inset

de
\begin_inset space ~
\end_inset

tareas
\begin_inset space ~
\end_inset

en
\begin_inset space ~
\end_inset

redes
\begin_inset space ~
\end_inset

móviles Suponiendo un conjunto de tareas que deben asignarse entre un conjunto
 de dispositivos, los modelos de rendimiento podrían obtener una medida
 aproximada del tiempo de respuesta que cada tarea requerirá sobre cada
 dispositivo con el fin de minimizar el tiempo total de secuenciación de
 las tareas.
\end_layout

\begin_layout Section
Framework de medición para Android
\begin_inset CommandInset label
LatexCommand label
name "subsec:Framework-de-medición"

\end_inset


\end_layout

\begin_layout Standard

\emph on
Android Meter
\emph default
 es un framework diseñado para simplificar la medición de propiedades de
 performance de componentes ejecutados bajo el sistema Android.
 El framework esta implementado como una biblioteca Java que permite ejecutar
 diferentes piezas de software y capturar propiedades y mediciones durante
 su ejecución.
 La biblioteca ofrece el soporte necesario para adaptarla a distintos dominios
 de componentes y algoritmos, y recolectar las mediciones que sirven de
 fuente para construir modelos de predicción a través de técnicas de aprendizaje
 de máquina.
 
\end_layout

\begin_layout Standard
El framework se basa en el concepto central de 
\emph on
Componente
\emph default
, que representa cualquier entidad de ejecución, como una funcion, algoritmo
 o servicio, que provee una funcionalidad a través de una interfaz específica.
 
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename ../images/android-component.png
	scale 70

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Esquema conceptual de componentes Android considerados.
 
\begin_inset CommandInset label
LatexCommand label
name "fig:android-component"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
En la figura 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:android-component"

\end_inset

 se ilustran distintos tipos de componentes que se pueden ejecutar y medir
 desde el framework, incluyendo servicios Web, servicios específicos de
 la plataforma Android, y cualquier algoritmo o pieza de código que se implement
e como metodos de objetos Java.
 Las instancias de objetos hacen referencia a cualquier componente residente
 en el espacio de memoria de una aplicación, el componente específico para
 servicios web incluye cualquier componente remoto fuera del dispositivo
 y accedidos a través de protocolos de comunicación Web, como 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
ac{HTTP}
\end_layout

\end_inset

.
 Por último el componente específico para servicios Android incluye cualquier
 proceso ejecutado en segundo plano residente en el mismo dispositivo y
 accedidos a través de objetos Intent (mecanismo de comunicación entre procesos
 del sistema Android).
 
\end_layout

\begin_layout Standard
A continuación se expone en la figura 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:TestingTool-Diagram"

\end_inset

 los principales conceptos que forman parte al framework 
\emph on
Android Meter
\emph default
.
 
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename ../images/TestingTool-Diagram.png
	scale 33

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Conceptos principales del framework Android Meter.
\begin_inset CommandInset label
LatexCommand label
name "fig:TestingTool-Diagram"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
La obtención de diferentes conjuntos de mediciones se realiza a través de
 la creación de planes de pruebas, que se configuran y posteriormente se
 ejecutan para obtener los datasets.
 Al momento de configurar los planes de pruebas se tiene la posibilidad
 de especificar qué componentes se ejecutarán, con qué datos de entrada,
 y qué propiedades o métricas se desean capturar, ya sean propiedades del
 contexto, de los datos, o propiedades no funcionales de la ejecución de
 los componentes.
 Las propiedades a obtener pueden ser:
\end_layout

\begin_layout Enumerate
Propiedades
\change_deleted 1188755597 1495057743
 
\change_unchanged
 del contexto: son las cualidades del entorno de ejecución, es decir, el
 dispositivo sobre el que se ejecuta la prueba de performance.
 Estas propiedades pueden ser estáticas, es decir, que se mantienen sin
 cambio durante la ejecución del plan de pruebas, como por ejemplo, el modelo
 del dispositivo, la arquitectura y cantidad de núcleos del CPU, tamaño
 de memoria, etc; y dinámicas, que son las propiedades del entorno que pueden
 variar durante la ejecución de los componentes, como el uso de CPU, el
 número de procesos en ejecución, tipo de conexión, etc.
 
\end_layout

\begin_layout Enumerate
Propiedades de los datos de entrada: son atributos que se pueden extraer
 de los parámetros con los que se invocan los componentes.
 Por ejemplo, dado un algoritmo de ordenamiento de vectores, el tamaño del
 vector de entrada seria una de estos atributos.
\end_layout

\begin_layout Enumerate
Propiedades
\change_deleted 1188755597 1495057743
 
\change_unchanged
 del componente: atributos del componente como el nombre, ubicación, etc.
\end_layout

\begin_layout Enumerate
Propiedades no funcionales: son las propiedades de interés que se desean
 inferir a partir de las propiedades anteriores.
 Estas propiedades se capturan en cada operacion de componentes, es decir,
 la ejecucion de un componente con determinados datos de entrada.
 Por ejemplo, el tiempo de respuesta, el consumo de batería, si la operación
 fue ejecutada con éxito o con error, etc.
\end_layout

\begin_layout Section
Herramienta de aprendizaje de modelos
\begin_inset CommandInset label
LatexCommand label
name "subsec:Herramienta-de-entrenamiento"

\end_inset


\end_layout

\begin_layout Standard
Nekonata es una herramienta para la construcción de modelos predictivos
 a través de técnicas de aprendizaje de máquina.
 El eje que ha guiado el diseño de la herramienta ha sido el brindar soporte
 para el uso de cualquier librería que ofrezca aprendizaje de máquina a
 través de la implementación de todos los conceptos involucrados como objetos
 independientes a los cuales adaptar las funcionalidades de las librerías.
 La herramienta 
\emph on
Nekonata
\emph default
 lleva a cabo dos tipos de procesos en el desarrollo de sus funciones: procesos
 automáticos y procesos semi-automáticos que requieren la colaboración del
 usuario con el fin de mejorar los resultados a partir de vistas gráficas
 que visualizan el comportamiento y características de los modelos y además,
 para incluir en el proceso el interés y criterio del usuario.
 
\end_layout

\begin_layout Standard
El flujo de trabajo de la herramienta consta de dos etapas, una de configuración
 y entrenamiento de modelos y otra de evaluación de los mismos.
 
\end_layout

\begin_layout Standard
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
En la figura, cambien 
\begin_inset Quotes eld
\end_inset

propiedad dinamica
\begin_inset Quotes erd
\end_inset

 por 
\begin_inset Quotes eld
\end_inset

propiedad a predecir
\begin_inset Quotes erd
\end_inset

 y 
\begin_inset Quotes eld
\end_inset

Libreria
\begin_inset Quotes erd
\end_inset

 por 
\begin_inset Quotes eld
\end_inset

Biblioteca de software
\begin_inset Quotes erd
\end_inset


\end_layout

\end_inset


\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename ../images/prediction-workflow.png
	scale 20

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Diagrama de flujo del proceso de configuración y entrenamiento de modelos.
\begin_inset CommandInset label
LatexCommand label
name "fig:prediction-workflow-1"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
En la etapa de configuración, se indican la biblioteca y el dataset que
 se desea considerar, habilitando la elección de las técnicas de aprendizaje
 y de la propiedad dinámica a predecir.
 Una vez seleccionados todos los valores requeridos, se procede a ejecutar
 las técnicas de aprendizaje para generar los modelos de predicción.
 Un detalle importante a considerar es que la herramienta no sólo genera
 los modelos a partir de parámetros fijos, sino que realiza una comparación
 interna entre modelos parciales para la obtención de una función de predicción
 más precisa y acertada.
\end_layout

\begin_layout Standard
Luego de la etapa de entrenamiento, los modelos generados por cada técnica
 son expuestos a una serie de métricas dispuestas de manera tal que permita
 visualizar las diferencias de desempeño entre técnicas con la misma métrica
 de evaluación considerada.
 Esta vista es un recurso ofrecido al usuario para decidir aquel modelo
 que a su criterio tenga mejor calidad a través de la comparación simultánea.
 Estas métricas de evaluación incluyen: el coeficiente de correlación de
 Pearson (CC) y la raíz del error cuadrático medio (RMSE).
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename C:/Users/usuario/Tesisworkspace/Tesis_Standalone/tesis/images/models-comparison-workflow.png
	scale 55

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Diagrama de flujo de la fase de comparación de modelos.
 
\begin_inset CommandInset label
LatexCommand label
name "fig:models-comparison-workflow"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Es conveniente trasladar el análisis a la mayor cantidad de métricas posibles,
 ya que un mismo indicador podría arrojar valores cercanos entre un algoritmo
 y otro favoreciendo equivocadamente a uno de ellos, error que podría notarse
 al compararlos simultáneamente con otras métricas.
 La metodología de operación de esta fase se muestra en la figura 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:models-comparison-workflow"

\end_inset

.
 
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename ../images/errors_screenshot.png
	scale 45

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Captura de pantalla de la herramienta 
\begin_inset CommandInset label
LatexCommand label
name "fig:models-comparison-workflow-1"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Nekonata hace foco en este detalle y ofrece al usuario una vista de imágenes
 (
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:models-comparison-workflow-1"

\end_inset

)con los indicadores medidos de cada algoritmo seleccionado por el usuario
 para aplicar el proceso de optimización y elegir, posteriormente, el que
 resulte más adecuado.
 La información gráfica complementaria que se brinda, detalla los algoritmos
 representados por medio de barras y agrupados en categorías separadas de
 acuerdo a cada métrica a modo de facilitar la comparación.
 Adicionalmente las barras se colorean en dos tonos diferentes para acentuar,
 por cada métrica, los clasificadores que significarían las mejores opciones
 para ese indicador.
 
\end_layout

\begin_layout Standard
La herramienta se desarrolló como una aplicación de escritorio pensada para
 desarrolladores e ingenieros de datos que necesitan un entorno usable y
 eficiente para construir modelos de predicción y analizar los datos 
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
La aplicacion esta bien que sea de escritorio pero no por limitaciones de
 los dispositivos moviles, sino porque es mas comodo para los desarrolladores
 o quien la use
\end_layout

\end_inset

.
 Esta implementación desvincula el framework de medición con la herramienta
 de aprendizaje, permitiendo la ejecución independiente entre ambas, y
\change_deleted 1188755597 1495057743
 
\change_unchanged
 el puente de comunicación entre ellas es la correspondencia entre la salida
 de la primer herramienta con la entrada de la segunda.
\end_layout

\begin_layout Standard
El atributo principal que dirigió el diseño de la herramienta fue la extensibili
dad de la misma.
 Esto significa que la herramienta puede aceptar diferentes tipos de bibliotecas
 de aprendizaje de máquina, datasets, modelos de regresión, parámetros y
 métricas.
 Esto se logró con una implementación orientado a objetos y basada en patrones
 de diseño.
\end_layout

\begin_layout Standard
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
Listar las tecnicas incluidas por el momento, con las que se hacen la evaluacion
\end_layout

\end_inset

Actualmente, la aplicación ofrece una implementación de las siguientes técnicas
 de regresión considerando la biblioteca de software Weka:
\end_layout

\begin_layout Itemize
Linear Regression: Es la implementación de la técnica Lineal Regression,
 considerando la variante de Ridge Regression.
\end_layout

\begin_layout Itemize
Neural Network Regression: Es la implementación de la técnica de Neural
 Network, considerando la variante de Multilayer Perceptron.
\end_layout

\begin_layout Itemize
Stochastic Gradient Descendent: Es la implementación de la técnica de Lineal
 Regression, considerando la variante de gradiente descendiente o SGD.
\end_layout

\begin_layout Itemize
Support Vector Machine Regression: Es la implementación de la técnica Vector
 Machine, considerando la variante de Sequential Minimal Optimization.
\end_layout

\begin_layout Itemize
Simple K Clusterer: Es una adaptación de la técnica de clustering K-Means
 Clusterer para regresión.
\end_layout

\begin_layout Standard
A través del uso de métricas se adquiere una idea estimativa del desempeño
 del clasificador frente al conjunto de datos de entrenamiento, sin embargo,
 podría resultar útil conocer el comportamiento general del algoritmo, contrasta
ndo cada uno de los valores reales del atributo clase con los valores predichos
 por el clasificador, y obtener así una vista exacta de la manera en que
 el clasificador se ajusta a los datos (Figura 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:screenshot-error-curve"

\end_inset

).
 
\end_layout

\begin_layout Standard
Este recurso es usado en la herramienta como un gráfico de dos líneas continuas
 de distinto color para representar el conjunto de datos de entrenamiento
 y el conjunto de datos predichos.
 Cada punto del dominio corresponde a cada instancia y la unión entre puntos
 sólo se realiza con fines ilustrativos.
 
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename ../images/screenshot-error-curve.png
	scale 80

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Captura de pantalla de la vista del error de predicción.
 
\begin_inset CommandInset label
LatexCommand label
name "fig:screenshot-error-curve"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\end_body
\end_document
